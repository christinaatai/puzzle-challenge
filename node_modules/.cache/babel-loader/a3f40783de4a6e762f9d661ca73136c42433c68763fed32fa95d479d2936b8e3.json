{"ast":null,"code":"var _jsxFileName = \"/Users/christinatai/Desktop/escape-room/src/components/ProblemPage/AnimatedText.js\";\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\n\n// Word wrapper\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = props => {\n  // We'll do this to prevent wrapping of words using CSS\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"word-wrapper\",\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 10\n  }, this);\n};\n\n// Map API \"type\" vaules to JSX tag names\n_c = Wrapper;\nconst tagMap = {\n  paragraph: \"p\",\n  heading1: \"h1\",\n  heading2: \"h2\"\n};\n\n// AnimatedCharacters\n// Handles the deconstruction of each word and character to setup for the\n// individual character animations\nconst AnimatedCharacters = props => {\n  // Framer Motion variant object, for controlling animation\n  const item = {\n    hidden: {\n      y: \"200%\",\n      color: \"#0055FF\",\n      transition: {\n        ease: [0.455, 0.03, 0.515, 0.955],\n        duration: 0.85\n      }\n    },\n    visible: {\n      y: 0,\n      color: \"#FF0088\",\n      transition: {\n        ease: [0.455, 0.03, 0.515, 0.955],\n        duration: 0.75\n      }\n    }\n  };\n\n  //  Split each word of props.text into an array\n  const splitWords = props.text.split(\" \");\n\n  // Create storage array\n  const words = [];\n\n  // Push each word into words array\n  for (const [, item] of splitWords.entries()) {\n    words.push(item.split(\"\"));\n  }\n\n  // Add a space (\"\\u00A0\") to the end of each word\n  words.map(word => {\n    return word.push(\"\\u00A0\");\n  });\n\n  // Get the tag name from tagMap\n  const Tag = tagMap[props.type];\n  return /*#__PURE__*/_jsxDEV(Tag, {\n    children: words.map((word, index) => {\n      return (\n        /*#__PURE__*/\n        // Wrap each word in the Wrapper component\n        _jsxDEV(Wrapper, {\n          children: words[index].flat().map((element, index) => {\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                overflow: \"hidden\",\n                display: \"inline-block\"\n              },\n              children: /*#__PURE__*/_jsxDEV(motion.span, {\n                style: {\n                  display: \"inline-block\"\n                },\n                variants: item,\n                children: element\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 17\n            }, this);\n          })\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      );\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_c2 = AnimatedCharacters;\nexport default AnimatedCharacters;\nvar _c, _c2;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"AnimatedCharacters\");","map":{"version":3,"names":["React","motion","jsxDEV","_jsxDEV","Wrapper","props","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","tagMap","paragraph","heading1","heading2","AnimatedCharacters","item","hidden","y","color","transition","ease","duration","visible","splitWords","text","split","words","entries","push","map","word","Tag","type","index","flat","element","style","overflow","display","span","variants","_c2","$RefreshReg$"],"sources":["/Users/christinatai/Desktop/escape-room/src/components/ProblemPage/AnimatedText.js"],"sourcesContent":["import React from \"react\";\nimport { motion } from \"framer-motion\";\n\n// Word wrapper\nconst Wrapper = (props) => {\n  // We'll do this to prevent wrapping of words using CSS\n  return <span className=\"word-wrapper\">{props.children}</span>;\n};\n\n// Map API \"type\" vaules to JSX tag names\nconst tagMap = {\n  paragraph: \"p\",\n  heading1: \"h1\",\n  heading2: \"h2\"\n};\n\n// AnimatedCharacters\n// Handles the deconstruction of each word and character to setup for the\n// individual character animations\nconst AnimatedCharacters = (props) => {\n  // Framer Motion variant object, for controlling animation\n  const item = {\n    hidden: {\n      y: \"200%\",\n      color: \"#0055FF\",\n      transition: { ease: [0.455, 0.03, 0.515, 0.955], duration: 0.85 }\n    },\n    visible: {\n      y: 0,\n      color: \"#FF0088\",\n      transition: { ease: [0.455, 0.03, 0.515, 0.955], duration: 0.75 }\n    }\n  };\n\n  //  Split each word of props.text into an array\n  const splitWords = props.text.split(\" \");\n\n  // Create storage array\n  const words = [];\n\n  // Push each word into words array\n  for (const [, item] of splitWords.entries()) {\n    words.push(item.split(\"\"));\n  }\n\n  // Add a space (\"\\u00A0\") to the end of each word\n  words.map((word) => {\n    return word.push(\"\\u00A0\");\n  });\n\n  // Get the tag name from tagMap\n  const Tag = tagMap[props.type];\n\n  return (\n    <Tag>\n      {words.map((word, index) => {\n        return (\n          // Wrap each word in the Wrapper component\n          <Wrapper key={index}>\n            {words[index].flat().map((element, index) => {\n              return (\n                <span\n                  style={{\n                    overflow: \"hidden\",\n                    display: \"inline-block\"\n                  }}\n                  key={index}\n                >\n                  <motion.span\n                    style={{ display: \"inline-block\" }}\n                    variants={item}\n                  >\n                    {element}\n                  </motion.span>\n                </span>\n              );\n            })}\n          </Wrapper>\n        );\n      })}\n      {/* {} */}\n    </Tag>\n  );\n};\n\nexport default AnimatedCharacters;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}